process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Certified Generative Ai\Projects\Quatar 1 projects'\ATM\node_modules\.bin\esrun-1716071303254.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// app.ts
import inquirer from "../../node_modules/inquirer/lib/inquirer.js";
import chalk from "../../node_modules/chalk/source/index.js";
console.log(chalk.magenta("----------------Wellcome To CLI Base ATM Using Inquirer -----------------Code By Muhammad Awais------------------"));
var balance = Math.floor(Math.random() * 1e6);
var existConfirmation = true;
do {
  console.log(chalk.cyanBright("Login Success Procced Next"));
  let atmServices = await inquirer.prompt([
    {
      name: "accountType",
      type: "list",
      choices: ["Current", "Saving", "Defualt"],
      message: "Select Your Account"
    },
    {
      name: "serviceAvail",
      type: "list",
      choices: ["cash withdraw", "blance Inquiry", "Fund Transfer "],
      message: "What you want to Procced"
    }
  ]);
  let { serviceAvail } = atmServices;
  if (serviceAvail === "cash withdraw") {
    let cashWithdraw = await inquirer.prompt([
      {
        name: "ammount",
        type: "input",
        message: "Enter Amount "
      }
    ]);
    console.log(balance);
    if (cashWithdraw.amount <= balance) {
      console.log(chalk.green(`Operation Successfull`));
      balance = balance - cashWithdraw.amount;
    } else {
      console.log(chalk.cyanBright(`Incificient Balance`));
    }
  } else if (serviceAvail === "blance Inquiry") {
    console.log(chalk.green(`Current Balance is RS ${balance}`));
  } else if (serviceAvail === "Fund Transfer ") {
  }
  let exist = await inquirer.prompt([
    {
      name: "existConfirmation",
      type: "confirm",
      message: "Do you want to continue or Exist ",
      default: false
    }
  ]);
  existConfirmation = exist.existConfirmation;
} while (existConfirmation);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiYXBwLnRzIl0sCiAgInNvdXJjZVJvb3QiOiAiRTpcXENlcnRpZmllZCBHZW5lcmF0aXZlIEFpXFxQcm9qZWN0c1xcUXVhdGFyIDEgcHJvamVjdHMnXFxBVE0iLAogICJzb3VyY2VzQ29udGVudCI6IFsiXHJcbmltcG9ydCBpbnF1aXJlciBmcm9tIFwiaW5xdWlyZXJcIjtcclxuaW1wb3J0IGNoYWxrIGZyb20gXCJjaGFsa1wiO1xyXG5jb25zb2xlLmxvZyhjaGFsay5tYWdlbnRhKFwiLS0tLS0tLS0tLS0tLS0tLVdlbGxjb21lIFRvIENMSSBCYXNlIEFUTSBVc2luZyBJbnF1aXJlciAtLS0tLS0tLS0tLS0tLS0tLUNvZGUgQnkgTXVoYW1tYWQgQXdhaXMtLS0tLS0tLS0tLS0tLS0tLS1cIikpXHJcbmxldCB1c2VyTmFtZTogU3RyaW5nID0gJyc7XHJcbmxldCBwaW46IG51bWJlciA9IDA7XHJcbmxldCBiYWxhbmNlOiBudW1iZXIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKTtcclxubGV0IGV4aXN0Q29uZmlybWF0aW9uOiBib29sZWFuID0gdHJ1ZTtcclxuZG8ge1xyXG5cclxuICAgIC8vICAgICBkb3tcclxuXHJcbiAgICAvLyBsZXQgdXNlckluZm89YXdhaXQgaW5xdWlyZXIucHJvbXB0KFtcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIG5hbWU6XCJ1c2VyTmFtZVwiLFxyXG4gICAgLy8gICAgICAgICB0eXBlOlwiaW5wdXRcIixcclxuICAgIC8vICAgICAgICAgbWVzc2FnZTpcIkVudGVyIFlvdXIgVXNlciBOYW1lXCJcclxuICAgIC8vICAgICB9LFxyXG5cclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIG5hbWU6XCJwaW5cIixcclxuICAgIC8vICAgICAgICAgdHlwZTpcInBhc3N3b3JkXCIsXHJcbiAgICAvLyAgICAgICAgIG1lc3NhZ2U6XCJFbnRlciBZb3VyIFBpblwiXHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gXSk7XHJcblxyXG4gICAgLy8gICAgIGlmICghdXNlckluZm8udXNlck5hbWUgfHwgIXVzZXJJbmZvLnBpbikge1xyXG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhcIlByb3Blcmx5IEVudGVyIFlvdXIgRGV0YWlscyAgXCIpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgIHBpbj11c2VySW5mby5waW47XHJcbiAgICAvLyAgICB1c2VyTmFtZT11c2VySW5mby51c2VyTmFtZTtcclxuICAgIC8vICAgICB9d2hpbGUoIXVzZXJOYW1lIHx8ICFwaW4pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGNoYWxrLmN5YW5CcmlnaHQoXCJMb2dpbiBTdWNjZXNzIFByb2NjZWQgTmV4dFwiKSk7XHJcblxyXG4gICAgbGV0IGF0bVNlcnZpY2VzOiB7XHJcbiAgICAgICAgc2VydmljZUF2YWlsOiBzdHJpbmdcclxuICAgIH0gPSBhd2FpdCBpbnF1aXJlci5wcm9tcHQoW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogJ2FjY291bnRUeXBlJyxcclxuICAgICAgICAgICAgdHlwZTogJ2xpc3QnLFxyXG4gICAgICAgICAgICBjaG9pY2VzOiBbJ0N1cnJlbnQnLCAnU2F2aW5nJywgJ0RlZnVhbHQnXSxcclxuICAgICAgICAgICAgbWVzc2FnZTogJ1NlbGVjdCBZb3VyIEFjY291bnQnXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnc2VydmljZUF2YWlsJyxcclxuICAgICAgICAgICAgdHlwZTogJ2xpc3QnLFxyXG4gICAgICAgICAgICBjaG9pY2VzOiBbJ2Nhc2ggd2l0aGRyYXcnLCAnYmxhbmNlIElucXVpcnknLCAnRnVuZCBUcmFuc2ZlciAnXSxcclxuICAgICAgICAgICAgbWVzc2FnZTogXCJXaGF0IHlvdSB3YW50IHRvIFByb2NjZWRcIixcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIF0pO1xyXG5cclxuXHJcbiAgICBsZXQgeyBzZXJ2aWNlQXZhaWwgfSA9IGF0bVNlcnZpY2VzO1xyXG5cclxuICAgIGlmIChzZXJ2aWNlQXZhaWwgPT09ICdjYXNoIHdpdGhkcmF3Jykge1xyXG4gICAgICAgIGxldCBjYXNoV2l0aGRyYXc6IHtcclxuICAgICAgICAgICAgYW1vdW50OiBudW1iZXJcclxuICAgICAgICB9ID0gYXdhaXQgaW5xdWlyZXIucHJvbXB0KFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ2FtbW91bnQnLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2lucHV0JyxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFbnRlciBBbW91bnQgJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYmFsYW5jZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGNhc2hXaXRoZHJhdy5hbW91bnQgPD0gYmFsYW5jZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjaGFsay5ncmVlbihgT3BlcmF0aW9uIFN1Y2Nlc3NmdWxsYCkpO1xyXG4gICAgICAgICAgICBiYWxhbmNlID0gYmFsYW5jZSAtIGNhc2hXaXRoZHJhdy5hbW91bnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjaGFsay5jeWFuQnJpZ2h0KGBJbmNpZmljaWVudCBCYWxhbmNlYCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlbHNlIGlmIChzZXJ2aWNlQXZhaWwgPT09ICdibGFuY2UgSW5xdWlyeScpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhjaGFsay5ncmVlbihgQ3VycmVudCBCYWxhbmNlIGlzIFJTICR7YmFsYW5jZX1gKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZWxzZSBpZiAoc2VydmljZUF2YWlsID09PSAnRnVuZCBUcmFuc2ZlciAnKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGxldCBleGlzdCA9IGF3YWl0IGlucXVpcmVyLnByb21wdChbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnZXhpc3RDb25maXJtYXRpb24nLFxyXG4gICAgICAgICAgICB0eXBlOiAnY29uZmlybScsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdEbyB5b3Ugd2FudCB0byBjb250aW51ZSBvciBFeGlzdCAnLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIF0pO1xyXG4gICAgZXhpc3RDb25maXJtYXRpb24gPSBleGlzdC5leGlzdENvbmZpcm1hdGlvbjtcclxufSB3aGlsZSAoZXhpc3RDb25maXJtYXRpb24pO1xyXG5cclxuXHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFDQSxPQUFPLGNBQWM7QUFDckIsT0FBTyxXQUFXO0FBQ2xCLFFBQVEsSUFBSSxNQUFNLFFBQVEsbUhBQW1ILENBQUM7QUFHOUksSUFBSSxVQUFrQixLQUFLLE1BQU0sS0FBSyxPQUFPLElBQUksR0FBTztBQUN4RCxJQUFJLG9CQUE2QjtBQUNqQyxHQUFHO0FBeUJDLFVBQVEsSUFBSSxNQUFNLFdBQVcsNEJBQTRCLENBQUM7QUFFMUQsTUFBSSxjQUVBLE1BQU0sU0FBUyxPQUFPO0FBQUEsSUFDdEI7QUFBQSxNQUNJLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLFNBQVMsQ0FBQyxXQUFXLFVBQVUsU0FBUztBQUFBLE1BQ3hDLFNBQVM7QUFBQSxJQUNiO0FBQUEsSUFFQTtBQUFBLE1BQ0ksTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLE1BQ04sU0FBUyxDQUFDLGlCQUFpQixrQkFBa0IsZ0JBQWdCO0FBQUEsTUFDN0QsU0FBUztBQUFBLElBRWI7QUFBQSxFQUVKLENBQUM7QUFHRCxNQUFJLEVBQUUsYUFBYSxJQUFJO0FBRXZCLE1BQUksaUJBQWlCLGlCQUFpQjtBQUNsQyxRQUFJLGVBRUEsTUFBTSxTQUFTLE9BQU87QUFBQSxNQUN0QjtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sU0FBUztBQUFBLE1BQ2I7QUFBQSxJQUNKLENBQUM7QUFDRCxZQUFRLElBQUksT0FBTztBQUVuQixRQUFJLGFBQWEsVUFBVSxTQUFTO0FBQ2hDLGNBQVEsSUFBSSxNQUFNLE1BQU0sdUJBQXVCLENBQUM7QUFDaEQsZ0JBQVUsVUFBVSxhQUFhO0FBQUEsSUFDckMsT0FFSTtBQUNBLGNBQVEsSUFBSSxNQUFNLFdBQVcscUJBQXFCLENBQUM7QUFBQSxJQUN2RDtBQUFBLEVBQ0osV0FFUyxpQkFBaUIsa0JBQWtCO0FBQ3hDLFlBQVEsSUFBSSxNQUFNLE1BQU0seUJBQXlCLFNBQVMsQ0FBQztBQUFBLEVBQy9ELFdBRVMsaUJBQWlCLGtCQUFrQjtBQUFBLEVBRTVDO0FBRUEsTUFBSSxRQUFRLE1BQU0sU0FBUyxPQUFPO0FBQUEsSUFDOUI7QUFBQSxNQUNJLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLFNBQVM7QUFBQSxNQUNULFNBQVM7QUFBQSxJQUNiO0FBQUEsRUFDSixDQUFDO0FBQ0Qsc0JBQW9CLE1BQU07QUFDOUIsU0FBUzsiLAogICJuYW1lcyI6IFtdCn0K

	