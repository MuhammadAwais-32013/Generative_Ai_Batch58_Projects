process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Certified Generative Ai\Projects\Quatar 1 projects'\ATM\node_modules\.bin\esrun-1716069975675.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// app.ts
import inquirer from "../../node_modules/inquirer/lib/inquirer.js";
import chalk from "../../node_modules/chalk/source/index.js";
console.log(chalk.magenta("----------------Wellcome To CLI Base ATM Using Inquirer -----------------Code By Muhammad Awais------------------"));
do {
  let userName = "";
  let pin = 0;
  const blance = Math.floor(Math.random() * 1e6);
  console.log(chalk.cyanBright("Login Success Procced Next"));
  let atmServices = await inquirer.prompt([
    {
      name: "accountType",
      type: "list",
      choices: ["Current", "Saving", "Defualt"],
      message: "Select Your Account"
    },
    {
      name: "serviceAvail",
      type: "list",
      choices: ["cash withdraw", "blance Inquiry", "Fund Transfer "],
      message: "What you want to Procced"
    }
  ]);
  console.log(blance);
  let { serviceAvail } = atmServices;
  if (serviceAvail === "cash withdraw") {
    let cashWithdraw = await inquirer.prompt([
      {
        name: "ammount"
      }
    ]);
  } else if (serviceAvail === "blance Inquiry") {
  } else if (serviceAvail === "Fund Transfer ") {
  }
} while (true);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiYXBwLnRzIl0sCiAgInNvdXJjZVJvb3QiOiAiRTpcXENlcnRpZmllZCBHZW5lcmF0aXZlIEFpXFxQcm9qZWN0c1xcUXVhdGFyIDEgcHJvamVjdHMnXFxBVE0iLAogICJzb3VyY2VzQ29udGVudCI6IFsiXHJcbmltcG9ydCBpbnF1aXJlciBmcm9tIFwiaW5xdWlyZXJcIjtcclxuaW1wb3J0IGNoYWxrIGZyb20gXCJjaGFsa1wiO1xyXG5jb25zb2xlLmxvZyhjaGFsay5tYWdlbnRhKFwiLS0tLS0tLS0tLS0tLS0tLVdlbGxjb21lIFRvIENMSSBCYXNlIEFUTSBVc2luZyBJbnF1aXJlciAtLS0tLS0tLS0tLS0tLS0tLUNvZGUgQnkgTXVoYW1tYWQgQXdhaXMtLS0tLS0tLS0tLS0tLS0tLS1cIikpXHJcblxyXG5kbyB7XHJcbiAgICBsZXQgdXNlck5hbWU6IFN0cmluZyA9ICcnO1xyXG4gICAgbGV0IHBpbjogbnVtYmVyID0gMDtcclxuICAgIGNvbnN0IGJsYW5jZTogbnVtYmVyID1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqIDEwMDAwMDApO1xyXG4gICAgLy8gICAgIGRve1xyXG5cclxuICAgIC8vIGxldCB1c2VySW5mbz1hd2FpdCBpbnF1aXJlci5wcm9tcHQoW1xyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgbmFtZTpcInVzZXJOYW1lXCIsXHJcbiAgICAvLyAgICAgICAgIHR5cGU6XCJpbnB1dFwiLFxyXG4gICAgLy8gICAgICAgICBtZXNzYWdlOlwiRW50ZXIgWW91ciBVc2VyIE5hbWVcIlxyXG4gICAgLy8gICAgIH0sXHJcblxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgbmFtZTpcInBpblwiLFxyXG4gICAgLy8gICAgICAgICB0eXBlOlwicGFzc3dvcmRcIixcclxuICAgIC8vICAgICAgICAgbWVzc2FnZTpcIkVudGVyIFlvdXIgUGluXCJcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyBdKTtcclxuXHJcbiAgICAvLyAgICAgaWYgKCF1c2VySW5mby51c2VyTmFtZSB8fCAhdXNlckluZm8ucGluKSB7XHJcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwiUHJvcGVybHkgRW50ZXIgWW91ciBEZXRhaWxzICBcIik7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgcGluPXVzZXJJbmZvLnBpbjtcclxuICAgIC8vICAgIHVzZXJOYW1lPXVzZXJJbmZvLnVzZXJOYW1lO1xyXG4gICAgLy8gICAgIH13aGlsZSghdXNlck5hbWUgfHwgIXBpbik7XHJcblxyXG4gICAgY29uc29sZS5sb2coY2hhbGsuY3lhbkJyaWdodChcIkxvZ2luIFN1Y2Nlc3MgUHJvY2NlZCBOZXh0XCIpKTtcclxuXHJcbiAgICBsZXQgYXRtU2VydmljZXM6IHtcclxuICAgICAgICBzZXJ2aWNlQXZhaWw6IHN0cmluZ1xyXG4gICAgfSA9IGF3YWl0IGlucXVpcmVyLnByb21wdChbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnYWNjb3VudFR5cGUnLFxyXG4gICAgICAgICAgICB0eXBlOiAnbGlzdCcsXHJcbiAgICAgICAgICAgIGNob2ljZXM6IFsnQ3VycmVudCcsICdTYXZpbmcnLCAnRGVmdWFsdCddLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiAnU2VsZWN0IFlvdXIgQWNjb3VudCdcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdzZXJ2aWNlQXZhaWwnLFxyXG4gICAgICAgICAgICB0eXBlOiAnbGlzdCcsXHJcbiAgICAgICAgICAgIGNob2ljZXM6IFsnY2FzaCB3aXRoZHJhdycsICdibGFuY2UgSW5xdWlyeScsICdGdW5kIFRyYW5zZmVyICddLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBcIldoYXQgeW91IHdhbnQgdG8gUHJvY2NlZFwiLFxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgXSk7XHJcbiAgICBjb25zb2xlLmxvZyhibGFuY2UpO1xyXG4gICAgXHJcbiAgICBsZXQgeyBzZXJ2aWNlQXZhaWwgfSA9IGF0bVNlcnZpY2VzO1xyXG5cclxuICAgIGlmIChzZXJ2aWNlQXZhaWwgPT09ICdjYXNoIHdpdGhkcmF3Jykge1xyXG4gICAgICAgIGxldCBjYXNoV2l0aGRyYXc9YXdhaXQgaW5xdWlyZXIucHJvbXB0KFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIG5hbWU6J2FtbW91bnQnICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdKVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBlbHNlIGlmIChzZXJ2aWNlQXZhaWwgPT09ICdibGFuY2UgSW5xdWlyeScpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZWxzZSBpZiAoc2VydmljZUF2YWlsID09PSAnRnVuZCBUcmFuc2ZlciAnKSB7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbn0gd2hpbGUgKHRydWUpO1xyXG5cclxuXHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFDQSxPQUFPLGNBQWM7QUFDckIsT0FBTyxXQUFXO0FBQ2xCLFFBQVEsSUFBSSxNQUFNLFFBQVEsbUhBQW1ILENBQUM7QUFFOUksR0FBRztBQUNDLE1BQUksV0FBbUI7QUFDdkIsTUFBSSxNQUFjO0FBQ2xCLFFBQU0sU0FBZ0IsS0FBSyxNQUFNLEtBQUssT0FBTyxJQUFHLEdBQU87QUF3QnZELFVBQVEsSUFBSSxNQUFNLFdBQVcsNEJBQTRCLENBQUM7QUFFMUQsTUFBSSxjQUVBLE1BQU0sU0FBUyxPQUFPO0FBQUEsSUFDdEI7QUFBQSxNQUNJLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLFNBQVMsQ0FBQyxXQUFXLFVBQVUsU0FBUztBQUFBLE1BQ3hDLFNBQVM7QUFBQSxJQUNiO0FBQUEsSUFFQTtBQUFBLE1BQ0ksTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLE1BQ04sU0FBUyxDQUFDLGlCQUFpQixrQkFBa0IsZ0JBQWdCO0FBQUEsTUFDN0QsU0FBUztBQUFBLElBRWI7QUFBQSxFQUVKLENBQUM7QUFDRCxVQUFRLElBQUksTUFBTTtBQUVsQixNQUFJLEVBQUUsYUFBYSxJQUFJO0FBRXZCLE1BQUksaUJBQWlCLGlCQUFpQjtBQUNsQyxRQUFJLGVBQWEsTUFBTSxTQUFTLE9BQU87QUFBQSxNQUNuQztBQUFBLFFBQ0UsTUFBSztBQUFBLE1BQ1A7QUFBQSxJQUNKLENBQUM7QUFBQSxFQUVMLFdBRVMsaUJBQWlCLGtCQUFrQjtBQUFBLEVBRTVDLFdBRVMsaUJBQWlCLGtCQUFrQjtBQUFBLEVBRTVDO0FBWUosU0FBUzsiLAogICJuYW1lcyI6IFtdCn0K

	