process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Certified Generative Ai\Projects\Quatar 1 projects'\ATM\node_modules\.bin\esrun-1716070527321.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// app.ts
import inquirer from "../../node_modules/inquirer/lib/inquirer.js";
import chalk from "../../node_modules/chalk/source/index.js";
console.log(chalk.magenta("----------------Wellcome To CLI Base ATM Using Inquirer -----------------Code By Muhammad Awais------------------"));
do {
  let userName = "";
  let pin = 0;
  let balance = Math.floor(Math.random() * 1e6);
  console.log(chalk.cyanBright("Login Success Procced Next"));
  let atmServices = await inquirer.prompt([
    {
      name: "accountType",
      type: "list",
      choices: ["Current", "Saving", "Defualt"],
      message: "Select Your Account"
    },
    {
      name: "serviceAvail",
      type: "list",
      choices: ["cash withdraw", "blance Inquiry", "Fund Transfer "],
      message: "What you want to Procced"
    }
  ]);
  let { serviceAvail } = atmServices;
  if (serviceAvail === "cash withdraw") {
    let cashWithdraw = await inquirer.prompt([
      {
        name: "ammount",
        type: "input",
        message: "Enter Amount "
      }
    ]);
    if (cashWithdraw.amount <= balance) {
      console.log(chalk.green(`Operation Successfull`));
      balance = balance - cashWithdraw.amount;
    }
  } else if (serviceAvail === "blance Inquiry") {
    console.log(chalk.green(`Current Balance is RS ${balance}`));
  } else if (serviceAvail === "Fund Transfer ") {
  }
} while (true);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiYXBwLnRzIl0sCiAgInNvdXJjZVJvb3QiOiAiRTpcXENlcnRpZmllZCBHZW5lcmF0aXZlIEFpXFxQcm9qZWN0c1xcUXVhdGFyIDEgcHJvamVjdHMnXFxBVE0iLAogICJzb3VyY2VzQ29udGVudCI6IFsiXHJcbmltcG9ydCBpbnF1aXJlciBmcm9tIFwiaW5xdWlyZXJcIjtcclxuaW1wb3J0IGNoYWxrIGZyb20gXCJjaGFsa1wiO1xyXG5jb25zb2xlLmxvZyhjaGFsay5tYWdlbnRhKFwiLS0tLS0tLS0tLS0tLS0tLVdlbGxjb21lIFRvIENMSSBCYXNlIEFUTSBVc2luZyBJbnF1aXJlciAtLS0tLS0tLS0tLS0tLS0tLUNvZGUgQnkgTXVoYW1tYWQgQXdhaXMtLS0tLS0tLS0tLS0tLS0tLS1cIikpXHJcblxyXG5kbyB7XHJcbiAgICBsZXQgdXNlck5hbWU6IFN0cmluZyA9ICcnO1xyXG4gICAgbGV0IHBpbjogbnVtYmVyID0gMDtcclxuICAgIGxldCBiYWxhbmNlOiBudW1iZXIgPU1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSogMTAwMDAwMCk7XHJcbiAgICAvLyAgICAgZG97XHJcblxyXG4gICAgLy8gbGV0IHVzZXJJbmZvPWF3YWl0IGlucXVpcmVyLnByb21wdChbXHJcbiAgICAvLyAgICAge1xyXG4gICAgLy8gICAgICAgICBuYW1lOlwidXNlck5hbWVcIixcclxuICAgIC8vICAgICAgICAgdHlwZTpcImlucHV0XCIsXHJcbiAgICAvLyAgICAgICAgIG1lc3NhZ2U6XCJFbnRlciBZb3VyIFVzZXIgTmFtZVwiXHJcbiAgICAvLyAgICAgfSxcclxuXHJcbiAgICAvLyAgICAge1xyXG4gICAgLy8gICAgICAgICBuYW1lOlwicGluXCIsXHJcbiAgICAvLyAgICAgICAgIHR5cGU6XCJwYXNzd29yZFwiLFxyXG4gICAgLy8gICAgICAgICBtZXNzYWdlOlwiRW50ZXIgWW91ciBQaW5cIlxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIF0pO1xyXG5cclxuICAgIC8vICAgICBpZiAoIXVzZXJJbmZvLnVzZXJOYW1lIHx8ICF1c2VySW5mby5waW4pIHtcclxuICAgIC8vICAgICAgICAgY29uc29sZS5sb2coXCJQcm9wZXJseSBFbnRlciBZb3VyIERldGFpbHMgIFwiKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICBwaW49dXNlckluZm8ucGluO1xyXG4gICAgLy8gICAgdXNlck5hbWU9dXNlckluZm8udXNlck5hbWU7XHJcbiAgICAvLyAgICAgfXdoaWxlKCF1c2VyTmFtZSB8fCAhcGluKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhjaGFsay5jeWFuQnJpZ2h0KFwiTG9naW4gU3VjY2VzcyBQcm9jY2VkIE5leHRcIikpO1xyXG5cclxuICAgIGxldCBhdG1TZXJ2aWNlczoge1xyXG4gICAgICAgIHNlcnZpY2VBdmFpbDogc3RyaW5nXHJcbiAgICB9ID0gYXdhaXQgaW5xdWlyZXIucHJvbXB0KFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdhY2NvdW50VHlwZScsXHJcbiAgICAgICAgICAgIHR5cGU6ICdsaXN0JyxcclxuICAgICAgICAgICAgY2hvaWNlczogWydDdXJyZW50JywgJ1NhdmluZycsICdEZWZ1YWx0J10sXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdTZWxlY3QgWW91ciBBY2NvdW50J1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogJ3NlcnZpY2VBdmFpbCcsXHJcbiAgICAgICAgICAgIHR5cGU6ICdsaXN0JyxcclxuICAgICAgICAgICAgY2hvaWNlczogWydjYXNoIHdpdGhkcmF3JywgJ2JsYW5jZSBJbnF1aXJ5JywgJ0Z1bmQgVHJhbnNmZXIgJ10sXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiV2hhdCB5b3Ugd2FudCB0byBQcm9jY2VkXCIsXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICBdKTtcclxuICAgXHJcbiAgICBcclxuICAgIGxldCB7IHNlcnZpY2VBdmFpbCB9ID0gYXRtU2VydmljZXM7XHJcblxyXG4gICAgaWYgKHNlcnZpY2VBdmFpbCA9PT0gJ2Nhc2ggd2l0aGRyYXcnKSB7XHJcbiAgICAgICAgbGV0IGNhc2hXaXRoZHJhdzp7XHJcbiAgICAgICAgICAgIGFtb3VudDpudW1iZXJcclxuICAgICAgICB9PWF3YWl0IGlucXVpcmVyLnByb21wdChbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBuYW1lOidhbW1vdW50JyxcclxuICAgICAgICAgICAgICB0eXBlOidpbnB1dCcsXHJcbiAgICAgICAgICAgICAgbWVzc2FnZTonRW50ZXIgQW1vdW50ICdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgaWYgKGNhc2hXaXRoZHJhdy5hbW91bnQ8PWJhbGFuY2UpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhjaGFsay5ncmVlbihgT3BlcmF0aW9uIFN1Y2Nlc3NmdWxsYCkpO1xyXG4gICAgICAgIGJhbGFuY2U9YmFsYW5jZS1jYXNoV2l0aGRyYXcuYW1vdW50O1xyXG4gICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGVsc2UgaWYgKHNlcnZpY2VBdmFpbCA9PT0gJ2JsYW5jZSBJbnF1aXJ5Jykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGNoYWxrLmdyZWVuKGBDdXJyZW50IEJhbGFuY2UgaXMgUlMgJHtiYWxhbmNlfWApKTtcclxuICAgIH1cclxuXHJcbiAgICBlbHNlIGlmIChzZXJ2aWNlQXZhaWwgPT09ICdGdW5kIFRyYW5zZmVyICcpIHtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxufSB3aGlsZSAodHJ1ZSk7XHJcblxyXG5cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUNBLE9BQU8sY0FBYztBQUNyQixPQUFPLFdBQVc7QUFDbEIsUUFBUSxJQUFJLE1BQU0sUUFBUSxtSEFBbUgsQ0FBQztBQUU5SSxHQUFHO0FBQ0MsTUFBSSxXQUFtQjtBQUN2QixNQUFJLE1BQWM7QUFDbEIsTUFBSSxVQUFpQixLQUFLLE1BQU0sS0FBSyxPQUFPLElBQUcsR0FBTztBQXdCdEQsVUFBUSxJQUFJLE1BQU0sV0FBVyw0QkFBNEIsQ0FBQztBQUUxRCxNQUFJLGNBRUEsTUFBTSxTQUFTLE9BQU87QUFBQSxJQUN0QjtBQUFBLE1BQ0ksTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLE1BQ04sU0FBUyxDQUFDLFdBQVcsVUFBVSxTQUFTO0FBQUEsTUFDeEMsU0FBUztBQUFBLElBQ2I7QUFBQSxJQUVBO0FBQUEsTUFDSSxNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixTQUFTLENBQUMsaUJBQWlCLGtCQUFrQixnQkFBZ0I7QUFBQSxNQUM3RCxTQUFTO0FBQUEsSUFFYjtBQUFBLEVBRUosQ0FBQztBQUdELE1BQUksRUFBRSxhQUFhLElBQUk7QUFFdkIsTUFBSSxpQkFBaUIsaUJBQWlCO0FBQ2xDLFFBQUksZUFFRixNQUFNLFNBQVMsT0FBTztBQUFBLE1BQ3BCO0FBQUEsUUFDRSxNQUFLO0FBQUEsUUFDTCxNQUFLO0FBQUEsUUFDTCxTQUFRO0FBQUEsTUFDVjtBQUFBLElBQ0osQ0FBQztBQUNGLFFBQUksYUFBYSxVQUFRLFNBQVM7QUFDakMsY0FBUSxJQUFJLE1BQU0sTUFBTSx1QkFBdUIsQ0FBQztBQUNoRCxnQkFBUSxVQUFRLGFBQWE7QUFBQSxJQUM5QjtBQUFBLEVBQ0gsV0FFUyxpQkFBaUIsa0JBQWtCO0FBQ3hDLFlBQVEsSUFBSSxNQUFNLE1BQU0seUJBQXlCLFNBQVMsQ0FBQztBQUFBLEVBQy9ELFdBRVMsaUJBQWlCLGtCQUFrQjtBQUFBLEVBRTVDO0FBWUosU0FBUzsiLAogICJuYW1lcyI6IFtdCn0K

	