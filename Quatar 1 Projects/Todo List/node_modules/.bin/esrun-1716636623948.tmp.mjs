process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Certified Generative Ai\Projects\Quatar 1 projects'\Todo List\node_modules\.bin\esrun-1716636623948.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);


// app.ts
import inquirer from "../../node_modules/inquirer/lib/inquirer.js";
import chalk from "../../node_modules/chalk/source/index.js";
var Todos = [];
var choice = true;
var main = async () => {
  while (choice) {
    let options = await inquirer.prompt([
      {
        name: "option",
        type: "list",
        choices: ["Add Task", "Delete Task", "Update Task", "View Task", "Exist"],
        message: "=========Chose Your Desire Action================="
      }
    ]);
    if (options.option === "Add Task") {
      await addTask();
    } else if (options.option === "Update Task") {
      await deleteTask();
    } else if (options.option === "View Task") {
      await updateTask();
    } else if (options.option === "Exist") {
      await exist();
    } else {
      console.log("Invallid Try Again");
    }
  }
};
var addTask = async () => {
  let addTodos = await inquirer.prompt([
    {
      name: "add",
      type: "input",
      message: "Enter a Tasks in Todos \n"
    }
  ]);
  Todos.push(addTodos.add);
  console.log(chalk.magentaBright(`${addTodos.add} is Added Successfully into Todos`));
};
var deleteTask = async () => {
  await viewTask();
  let deleteTodos = await inquirer.prompt([
    {
      name: "delete",
      type: "input",
      message: 'Enter "index No of  Tasks" to delete \n'
    }
  ]);
  let deleteIndex = deleteTodos.delete;
  let deletTask = Todos.splice(deleteIndex, 1);
  console.log(chalk.magentaBright(`${deletTask} is Deleted Successfully from Todos check the update from **View Task** `));
};
var updateTask = async () => {
  await viewTask();
  let updateTodos = await inquirer.prompt([
    {
      name: "update",
      type: "input",
      message: 'Enter "index No of  Tasks" to update \n'
    },
    {
      name: "newTask",
      type: "input",
      message: 'Enter "new Tasks" to update \n'
    }
  ]);
  let updateindex = updateTodos.update;
  Todos[updateindex] = updateTodos.newTask;
  console.log(chalk.magentaBright(`Todos is Updated " check the update from **View Task** `));
};
var viewTask = async () => {
  console.log(chalk.cyanBright("Your Todos is below"));
  Todos.forEach((task, index) => {
    console.log(`${index}: ${task}`);
  });
};
var exist = async () => {
  let existTodos = await inquirer.prompt([
    {
      name: "exist",
      type: "confirm",
      message: "Want to exist \n",
      default: false
    }
  ]);
  choice = existTodos.exist;
};
main();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiYXBwLnRzIl0sCiAgInNvdXJjZVJvb3QiOiAiRTpcXENlcnRpZmllZCBHZW5lcmF0aXZlIEFpXFxQcm9qZWN0c1xcUXVhdGFyIDEgcHJvamVjdHMnXFxUb2RvIExpc3QiLAogICJzb3VyY2VzQ29udGVudCI6IFsiIyEgdXNyL2Jpbi9lbnYgbm9kZVxyXG5pbXBvcnQgaW5xdWlyZXIgZnJvbSBcImlucXVpcmVyXCI7XHJcbmltcG9ydCBjaGFsayBmcm9tIFwiY2hhbGtcIjtcclxubGV0IFRvZG9zOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxubGV0IGNob2ljZSA9IHRydWU7XHJcbmxldCBtYWluID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgd2hpbGUgKGNob2ljZSkge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9ucyA9IGF3YWl0IGlucXVpcmVyLnByb21wdChbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdvcHRpb24nLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpc3QnLFxyXG4gICAgICAgICAgICAgICAgY2hvaWNlczogWydBZGQgVGFzaycsICdEZWxldGUgVGFzaycsICdVcGRhdGUgVGFzaycsICdWaWV3IFRhc2snLCAnRXhpc3QnXSxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICc9PT09PT09PT1DaG9zZSBZb3VyIERlc2lyZSBBY3Rpb249PT09PT09PT09PT09PT09PSdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF0pO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5vcHRpb24gPT09ICdBZGQgVGFzaycpIHtcclxuICAgICAgICAgICAgYXdhaXQgYWRkVGFzaygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5vcHRpb24gPT09ICdVcGRhdGUgVGFzaycpIHtcclxuICAgICAgICAgICAgYXdhaXQgZGVsZXRlVGFzaygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5vcHRpb24gPT09ICdWaWV3IFRhc2snKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHVwZGF0ZVRhc2soKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMub3B0aW9uID09PSAnRXhpc3QnKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IGV4aXN0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJJbnZhbGxpZCBUcnkgQWdhaW5cIik7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEFkZCBUYXNrIEZ1bmN0aW9uXHJcbmxldCBhZGRUYXNrID0gYXN5bmMgKCkgPT4ge1xyXG5cclxuICAgIGxldCBhZGRUb2RvcyA9IGF3YWl0IGlucXVpcmVyLnByb21wdChbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnYWRkJyxcclxuICAgICAgICAgICAgdHlwZTogJ2lucHV0JyxcclxuICAgICAgICAgICAgbWVzc2FnZTogJ0VudGVyIGEgVGFza3MgaW4gVG9kb3MgXFxuJ1xyXG4gICAgICAgIH1cclxuICAgIF0pO1xyXG5cclxuICAgIFRvZG9zLnB1c2goYWRkVG9kb3MuYWRkKTtcclxuICAgIGNvbnNvbGUubG9nKGNoYWxrLm1hZ2VudGFCcmlnaHQoYCR7YWRkVG9kb3MuYWRkfSBpcyBBZGRlZCBTdWNjZXNzZnVsbHkgaW50byBUb2Rvc2ApKTtcclxufVxyXG5cclxuXHJcbi8vIGRlbGV0ZSBUYXNrIEZ1bmN0aW9uXHJcbmxldCBkZWxldGVUYXNrID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgYXdhaXQgdmlld1Rhc2soKTtcclxuICAgIGxldCBkZWxldGVUb2RvcyA9IGF3YWl0IGlucXVpcmVyLnByb21wdChbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnZGVsZXRlJyxcclxuICAgICAgICAgICAgdHlwZTogJ2lucHV0JyxcclxuICAgICAgICAgICAgbWVzc2FnZTogJ0VudGVyIFwiaW5kZXggTm8gb2YgIFRhc2tzXCIgdG8gZGVsZXRlIFxcbidcclxuICAgICAgICB9XHJcbiAgICBdKTtcclxuXHJcbiAgICBsZXQgZGVsZXRlSW5kZXggPSBkZWxldGVUb2Rvcy5kZWxldGU7XHJcbiAgICBsZXQgZGVsZXRUYXNrID0gVG9kb3Muc3BsaWNlKGRlbGV0ZUluZGV4LCAxKTtcclxuICAgIGNvbnNvbGUubG9nKGNoYWxrLm1hZ2VudGFCcmlnaHQoYCR7ZGVsZXRUYXNrfSBpcyBEZWxldGVkIFN1Y2Nlc3NmdWxseSBmcm9tIFRvZG9zIGNoZWNrIHRoZSB1cGRhdGUgZnJvbSAqKlZpZXcgVGFzayoqIGApKTtcclxuXHJcbn1cclxuXHJcblxyXG4vLz09PT09PT09PT09PT09PT09PSBVcGRhdGUgVGFzayBGdW5jdGlvblxyXG5sZXQgdXBkYXRlVGFzayA9IGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IHZpZXdUYXNrKCk7XHJcbiAgICBsZXQgdXBkYXRlVG9kb3MgPSBhd2FpdCBpbnF1aXJlci5wcm9tcHQoW1xyXG5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICd1cGRhdGUnLFxyXG4gICAgICAgICAgICB0eXBlOiAnaW5wdXQnLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiAnRW50ZXIgXCJpbmRleCBObyBvZiAgVGFza3NcIiB0byB1cGRhdGUgXFxuJ1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogJ25ld1Rhc2snLFxyXG4gICAgICAgICAgICB0eXBlOiAnaW5wdXQnLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiAnRW50ZXIgXCJuZXcgVGFza3NcIiB0byB1cGRhdGUgXFxuJ1xyXG4gICAgICAgIH1cclxuICAgIF0pO1xyXG5cclxuICAgIGxldCB1cGRhdGVpbmRleCA9IHVwZGF0ZVRvZG9zLnVwZGF0ZVxyXG4gICAgVG9kb3NbdXBkYXRlaW5kZXhdID0gdXBkYXRlVG9kb3MubmV3VGFzaztcclxuICAgICAgICBjb25zb2xlLmxvZyhjaGFsay5tYWdlbnRhQnJpZ2h0KGBUb2RvcyBpcyBVcGRhdGVkIFwiIGNoZWNrIHRoZSB1cGRhdGUgZnJvbSAqKlZpZXcgVGFzayoqIGApKTtcclxufVxyXG5cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT1WaWV3IFRhc2sgRnVuY3Rpb25cclxubGV0IHZpZXdUYXNrID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coY2hhbGsuY3lhbkJyaWdodCgnWW91ciBUb2RvcyBpcyBiZWxvdycpKTtcclxuXHJcbiAgICBUb2Rvcy5mb3JFYWNoKCh0YXNrLCBpbmRleCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGAke2luZGV4fTogJHt0YXNrfWApO1xyXG5cclxuICAgIH0pO1xyXG5cclxufVxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT1FeGlzdCBGdW5jdGlvblxyXG5cclxuLy8gQWRkIFRhc2sgRnVuY3Rpb25cclxubGV0IGV4aXN0ID0gYXN5bmMgKCkgPT4ge1xyXG5cclxuICAgIGxldCBleGlzdFRvZG9zID0gYXdhaXQgaW5xdWlyZXIucHJvbXB0KFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdleGlzdCcsXHJcbiAgICAgICAgICAgIHR5cGU6ICdjb25maXJtJyxcclxuICAgICAgICAgICAgbWVzc2FnZTogJ1dhbnQgdG8gZXhpc3QgXFxuJyxcclxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICBdKTtcclxuXHJcbiAgICBjaG9pY2UgPSBleGlzdFRvZG9zLmV4aXN0O1xyXG59XHJcblxyXG5cclxubWFpbigpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7QUFDQSxPQUFPLGNBQWM7QUFDckIsT0FBTyxX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

	