process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Certified Generative Ai\Projects\Quatar 1 projects'\Number Guess\node_modules\.bin\esrun-1716064525229.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);


// index.ts
import inquirer from "../../node_modules/inquirer/lib/inquirer.js";
var conformation = true;
do {
  let numberGame = await inquirer.prompt([
    {
      name: "minNo",
      type: "input",
      message: "Enter the Starting of Range "
    },
    {
      name: "maxNo",
      type: "input",
      message: "Enter the Ending of Range "
    },
    {
      name: "guessNo",
      type: "input",
      message: "Enter the Number to Guess "
    }
  ]);
  let { minNo, maxNo, guessNo } = numberGame;
  let randomNo = Math.floor(Math.random() * (maxNo - minNo + 1) + minNo);
  if (guessNo === randomNo) {
    console.log("Congratulations! You guessed it right!");
    continue;
  } else if (guessNo <= maxNo) {
    console.log("You entered a number above the range");
    console.log(`Your Guess is ${guessNo} but Random Number is ${randomNo}`);
    continue;
  } else if (guessNo >= minNo) {
    console.log("You entered a number below the range");
    console.log(`Your Guess is ${guessNo} but Random Number is ${randomNo}`);
  } else {
    console.log("Try again");
    console.log(`Your Guess is ${guessNo} but Random Number is ${randomNo}`);
  }
  let existOp = await inquirer.prompt([
    {
      name: "conformation",
      type: "confirm",
      message: "Do you want to Continue ",
      default: false
    }
  ]);
  conformation = existOp.conformation;
} while (conformation);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiaW5kZXgudHMiXSwKICAic291cmNlUm9vdCI6ICJFOlxcQ2VydGlmaWVkIEdlbmVyYXRpdmUgQWlcXFByb2plY3RzXFxRdWF0YXIgMSBwcm9qZWN0cydcXE51bWJlciBHdWVzcyIsCiAgInNvdXJjZXNDb250ZW50IjogWyIjISAvdXNyL2Jpbi9lbnYgbm9kZVxyXG5pbXBvcnQgaW5xdWlyZXIgZnJvbSBcImlucXVpcmVyXCI7XHJcbmltcG9ydCB7IGV4aXQgfSBmcm9tIFwicHJvY2Vzc1wiO1xyXG5sZXQgY29uZm9ybWF0aW9uID0gdHJ1ZTtcclxuZG8ge1xyXG5cclxuICAgbGV0IG51bWJlckdhbWUgPSBhd2FpdCBpbnF1aXJlci5wcm9tcHQoW1xyXG4gICAgICB7XHJcbiAgICAgICAgIG5hbWU6IFwibWluTm9cIixcclxuICAgICAgICAgdHlwZTogXCJpbnB1dFwiLFxyXG4gICAgICAgICBtZXNzYWdlOiBcIkVudGVyIHRoZSBTdGFydGluZyBvZiBSYW5nZSBcIlxyXG4gICAgICB9LFxyXG5cclxuICAgICAge1xyXG4gICAgICAgICBuYW1lOiBcIm1heE5vXCIsXHJcbiAgICAgICAgIHR5cGU6IFwiaW5wdXRcIixcclxuICAgICAgICAgbWVzc2FnZTogXCJFbnRlciB0aGUgRW5kaW5nIG9mIFJhbmdlIFwiXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICB7XHJcbiAgICAgICAgIG5hbWU6IFwiZ3Vlc3NOb1wiLFxyXG4gICAgICAgICB0eXBlOiBcImlucHV0XCIsXHJcbiAgICAgICAgIG1lc3NhZ2U6IFwiRW50ZXIgdGhlIE51bWJlciB0byBHdWVzcyBcIlxyXG4gICAgICB9XHJcblxyXG4gICBdKTtcclxuXHJcbiAgIGxldCB7IG1pbk5vLCBtYXhObywgZ3Vlc3NObyB9ID0gbnVtYmVyR2FtZTtcclxuXHJcblxyXG4gICBsZXQgcmFuZG9tTm8gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4Tm8gLSBtaW5ObyArIDEpICsgbWluTm8pXHJcbiAgIGlmIChndWVzc05vID09PSByYW5kb21Obykge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkNvbmdyYXR1bGF0aW9ucyEgWW91IGd1ZXNzZWQgaXQgcmlnaHQhXCIpO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgfSBlbHNlIGlmIChndWVzc05vIDw9IG1heE5vKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiWW91IGVudGVyZWQgYSBudW1iZXIgYWJvdmUgdGhlIHJhbmdlXCIpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgWW91ciBHdWVzcyBpcyAke2d1ZXNzTm99IGJ1dCBSYW5kb20gTnVtYmVyIGlzICR7cmFuZG9tTm99YCk7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICB9IGVsc2UgaWYgKGd1ZXNzTm8gPj0gbWluTm8pIHtcclxuICAgICAgY29uc29sZS5sb2coXCJZb3UgZW50ZXJlZCBhIG51bWJlciBiZWxvdyB0aGUgcmFuZ2VcIik7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBZb3VyIEd1ZXNzIGlzICR7Z3Vlc3NOb30gYnV0IFJhbmRvbSBOdW1iZXIgaXMgJHtyYW5kb21Ob31gKVxyXG4gICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlRyeSBhZ2FpblwiKTtcclxuICAgICAgY29uc29sZS5sb2coYFlvdXIgR3Vlc3MgaXMgJHtndWVzc05vfSBidXQgUmFuZG9tIE51bWJlciBpcyAke3JhbmRvbU5vfWApXHJcbiAgIH1cclxuXHJcbiAgIGxldCBleGlzdE9wID0gYXdhaXQgaW5xdWlyZXIucHJvbXB0KFtcclxuICAgICAge1xyXG4gICAgICAgICBuYW1lOiBcImNvbmZvcm1hdGlvblwiLFxyXG4gICAgICAgICB0eXBlOiBcImNvbmZpcm1cIixcclxuICAgICAgICAgbWVzc2FnZTogXCJEbyB5b3Ugd2FudCB0byBDb250aW51ZSBcIixcclxuICAgICAgICAgZGVmYXVsdDogZmFsc2VcclxuXHJcbiAgICAgIH1cclxuICAgXSk7XHJcblxyXG4gICBjb25mb3JtYXRpb24gPSBleGlzdE9wLmNvbmZvcm1hdGlvbjtcclxufSB3aGlsZSAoY29uZm9ybWF0aW9uKTtcclxuXHJcblxyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7QUFDQSxPQUFPLGNBQWM7QUFFckIsSUFBSSxlQUFlO0FBQ25CLEdBQUc7QUFFQSxNQUFJLGFBQWEsTUFBTSxTQUFTLE9BQU87QUFBQSxJQUNwQztBQUFBLE1BQ0csTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLE1BQ04sU0FBUztBQUFBLElBQ1o7QUFBQSxJQUVBO0FBQUEsTUFDRyxNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixTQUFTO0FBQUEsSUFDWjtBQUFBLElBRUE7QUFBQSxNQUNHLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLFNBQVM7QUFBQSxJQUNaO0FBQUEsRUFFSCxDQUFDO0FBRUQsTUFBSSxFQUFFLE9BQU8sT0FBTyxRQUFRLElBQUk7QUFHaEMsTUFBSSxXQUFXLEtBQUssTUFBTSxLQUFLLE9BQU8sS0FBSyxRQUFRLFFBQVEsS0FBSyxLQUFLO0FBQ3JFLE1BQUksWUFBWSxVQUFVO0FBQ3ZCLFlBQVEsSUFBSSx3Q0FBd0M7QUFDcEQ7QUFBQSxFQUNILFdBQVcsV0FBVyxPQUFPO0FBQzFCLFlBQVEsSUFBSSxzQ0FBc0M7QUFDbEQsWUFBUSxJQUFJLGlCQUFpQixnQ0FBZ0MsVUFBVTtBQUN2RTtBQUFBLEVBQ0gsV0FBVyxXQUFXLE9BQU87QUFDMUIsWUFBUSxJQUFJLHNDQUFzQztBQUNsRCxZQUFRLElBQUksaUJBQWlCLGdDQUFnQyxVQUFVO0FBQUEsRUFDMUUsT0FBTztBQUNKLFlBQVEsSUFBSSxXQUFXO0FBQ3ZCLFlBQVEsSUFBSSxpQkFBaUIsZ0NBQWdDLFVBQVU7QUFBQSxFQUMxRTtBQUVBLE1BQUksVUFBVSxNQUFNLFNBQVMsT0FBTztBQUFBLElBQ2pDO0FBQUEsTUFDRyxNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixTQUFTO0FBQUEsTUFDVCxTQUFTO0FBQUEsSUFFWjtBQUFBLEVBQ0gsQ0FBQztBQUVELGlCQUFlLFFBQVE7QUFDMUIsU0FBUzsiLAogICJuYW1lcyI6IFtdCn0K

	