process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Certified Generative Ai\Projects\Quatar 1 projects'\Number Guess\node_modules\.bin\esrun-1716065149289.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);


// index.ts
import inquirer from "../../node_modules/inquirer/lib/inquirer.js";
import chalk from "../../node_modules/chalk/source/index.js";
var conformation = true;
do {
  let numberGame = await inquirer.prompt([
    {
      name: "minNo",
      type: "input",
      message: chalk.bgBlue("Enter the Starting of Range ")
    },
    {
      name: "maxNo",
      type: "input",
      message: "Enter the Ending of Range "
    },
    {
      name: "guessNo",
      type: "input",
      message: "Enter the Number to Guess "
    }
  ]);
  let { minNo, maxNo, guessNo } = numberGame;
  let randomNo = Math.floor(Math.random() * (maxNo - minNo + 1) + minNo);
  if (guessNo === randomNo) {
    console.log("Congratulations! You guessed it right!");
  } else if (guessNo > maxNo) {
    console.log("You entered a number above the range");
    console.log(`Your Guess is ${guessNo} but Random Number is ${randomNo}`);
  } else if (guessNo < minNo) {
    console.log("You entered a number below the range");
    console.log(`Your Guess is ${guessNo} but Random Number is ${randomNo}`);
  } else {
    console.log(" Wrong Guess! Try again");
    console.log(`Your Guess is ${guessNo} but Random Number is ${randomNo}`);
  }
  let existOp = await inquirer.prompt([
    {
      name: "conformation",
      type: "confirm",
      message: "Do you want to Continue ",
      default: false
    }
  ]);
  conformation = existOp.conformation;
} while (conformation);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiaW5kZXgudHMiXSwKICAic291cmNlUm9vdCI6ICJFOlxcQ2VydGlmaWVkIEdlbmVyYXRpdmUgQWlcXFByb2plY3RzXFxRdWF0YXIgMSBwcm9qZWN0cydcXE51bWJlciBHdWVzcyIsCiAgInNvdXJjZXNDb250ZW50IjogWyIjISAvdXNyL2Jpbi9lbnYgbm9kZVxyXG5pbXBvcnQgaW5xdWlyZXIgZnJvbSBcImlucXVpcmVyXCI7XHJcbmltcG9ydCB7IGV4aXQgfSBmcm9tIFwicHJvY2Vzc1wiO1xyXG5pbXBvcnQgY2hhbGsgZnJvbSBcImNoYWxrXCI7XHJcbmxldCBjb25mb3JtYXRpb24gPSB0cnVlO1xyXG5kbyB7XHJcblxyXG4gICBsZXQgbnVtYmVyR2FtZSA9IGF3YWl0IGlucXVpcmVyLnByb21wdChbXHJcbiAgICAgIHtcclxuICAgICAgICAgbmFtZTogXCJtaW5Ob1wiLFxyXG4gICAgICAgICB0eXBlOiBcImlucHV0XCIsXHJcbiAgICAgICAgIG1lc3NhZ2U6IGNoYWxrLmJnQmx1ZShcIkVudGVyIHRoZSBTdGFydGluZyBvZiBSYW5nZSBcIilcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHtcclxuICAgICAgICAgbmFtZTogXCJtYXhOb1wiLFxyXG4gICAgICAgICB0eXBlOiBcImlucHV0XCIsXHJcbiAgICAgICAgIG1lc3NhZ2U6IFwiRW50ZXIgdGhlIEVuZGluZyBvZiBSYW5nZSBcIlxyXG4gICAgICB9LFxyXG5cclxuICAgICAge1xyXG4gICAgICAgICBuYW1lOiBcImd1ZXNzTm9cIixcclxuICAgICAgICAgdHlwZTogXCJpbnB1dFwiLFxyXG4gICAgICAgICBtZXNzYWdlOiBcIkVudGVyIHRoZSBOdW1iZXIgdG8gR3Vlc3MgXCJcclxuICAgICAgfVxyXG5cclxuICAgXSk7XHJcblxyXG4gICBsZXQgeyBtaW5ObywgbWF4Tm8sIGd1ZXNzTm8gfSA9IG51bWJlckdhbWU7XHJcblxyXG5cclxuICAgbGV0IHJhbmRvbU5vID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heE5vIC0gbWluTm8gKyAxKSArIG1pbk5vKVxyXG4gICBpZiAoZ3Vlc3NObyA9PT0gcmFuZG9tTm8pIHtcclxuICAgICAgY29uc29sZS5sb2coXCJDb25ncmF0dWxhdGlvbnMhIFlvdSBndWVzc2VkIGl0IHJpZ2h0IVwiKTtcclxuICAgICAgXHJcbiAgIH0gZWxzZSBpZiAoZ3Vlc3NObyA+IG1heE5vKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiWW91IGVudGVyZWQgYSBudW1iZXIgYWJvdmUgdGhlIHJhbmdlXCIpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgWW91ciBHdWVzcyBpcyAke2d1ZXNzTm99IGJ1dCBSYW5kb20gTnVtYmVyIGlzICR7cmFuZG9tTm99YCk7XHJcbiAgICAgIFxyXG4gICB9IGVsc2UgaWYgKGd1ZXNzTm8gPCBtaW5Obykge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIllvdSBlbnRlcmVkIGEgbnVtYmVyIGJlbG93IHRoZSByYW5nZVwiKTtcclxuICAgICAgY29uc29sZS5sb2coYFlvdXIgR3Vlc3MgaXMgJHtndWVzc05vfSBidXQgUmFuZG9tIE51bWJlciBpcyAke3JhbmRvbU5vfWApXHJcbiAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiIFdyb25nIEd1ZXNzISBUcnkgYWdhaW5cIik7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBZb3VyIEd1ZXNzIGlzICR7Z3Vlc3NOb30gYnV0IFJhbmRvbSBOdW1iZXIgaXMgJHtyYW5kb21Ob31gKVxyXG4gICB9XHJcblxyXG4gICBsZXQgZXhpc3RPcCA9IGF3YWl0IGlucXVpcmVyLnByb21wdChbXHJcbiAgICAgIHtcclxuICAgICAgICAgbmFtZTogXCJjb25mb3JtYXRpb25cIixcclxuICAgICAgICAgdHlwZTogXCJjb25maXJtXCIsXHJcbiAgICAgICAgIG1lc3NhZ2U6IFwiRG8geW91IHdhbnQgdG8gQ29udGludWUgXCIsXHJcbiAgICAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcblxyXG4gICAgICB9XHJcbiAgIF0pO1xyXG5cclxuICAgY29uZm9ybWF0aW9uID0gZXhpc3RPcC5jb25mb3JtYXRpb247XHJcbn0gd2hpbGUgKGNvbmZvcm1hdGlvbik7XHJcblxyXG5cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7O0FBQ0EsT0FBTyxjQUFjO0FBRXJCLE9BQU8sV0FBVztBQUNsQixJQUFJLGVBQWU7QUFDbkIsR0FBRztBQUVBLE1BQUksYUFBYSxNQUFNLFNBQVMsT0FBTztBQUFBLElBQ3BDO0FBQUEsTUFDRyxNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixTQUFTLE1BQU0sT0FBTyw4QkFBOEI7QUFBQSxJQUN2RDtBQUFBLElBRUE7QUFBQSxNQUNHLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLFNBQVM7QUFBQSxJQUNaO0FBQUEsSUFFQTtBQUFBLE1BQ0csTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLE1BQ04sU0FBUztBQUFBLElBQ1o7QUFBQSxFQUVILENBQUM7QUFFRCxNQUFJLEVBQUUsT0FBTyxPQUFPLFFBQVEsSUFBSTtBQUdoQyxNQUFJLFdBQVcsS0FBSyxNQUFNLEtBQUssT0FBTyxLQUFLLFFBQVEsUUFBUSxLQUFLLEtBQUs7QUFDckUsTUFBSSxZQUFZLFVBQVU7QUFDdkIsWUFBUSxJQUFJLHdDQUF3QztBQUFBLEVBRXZELFdBQVcsVUFBVSxPQUFPO0FBQ3pCLFlBQVEsSUFBSSxzQ0FBc0M7QUFDbEQsWUFBUSxJQUFJLGlCQUFpQixnQ0FBZ0MsVUFBVTtBQUFBLEVBRTFFLFdBQVcsVUFBVSxPQUFPO0FBQ3pCLFlBQVEsSUFBSSxzQ0FBc0M7QUFDbEQsWUFBUSxJQUFJLGlCQUFpQixnQ0FBZ0MsVUFBVTtBQUFBLEVBQzFFLE9BQU87QUFDSixZQUFRLElBQUkseUJBQXlCO0FBQ3JDLFlBQVEsSUFBSSxpQkFBaUIsZ0NBQWdDLFVBQVU7QUFBQSxFQUMxRTtBQUVBLE1BQUksVUFBVSxNQUFNLFNBQVMsT0FBTztBQUFBLElBQ2pDO0FBQUEsTUFDRyxNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixTQUFTO0FBQUEsTUFDVCxTQUFTO0FBQUEsSUFFWjtBQUFBLEVBQ0gsQ0FBQztBQUVELGlCQUFlLFFBQVE7QUFDMUIsU0FBUzsiLAogICJuYW1lcyI6IFtdCn0K

	