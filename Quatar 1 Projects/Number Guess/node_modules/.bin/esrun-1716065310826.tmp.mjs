process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Certified Generative Ai\Projects\Quatar 1 projects'\Number Guess\node_modules\.bin\esrun-1716065310826.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);


// index.ts
import inquirer from "../../node_modules/inquirer/lib/inquirer.js";
import chalk from "../../node_modules/chalk/source/index.js";
var conformation = true;
do {
  let numberGame = await inquirer.prompt([
    {
      name: "minNo",
      type: "input",
      message: chalk.greenBright("Enter the Starting of Range ")
    },
    {
      name: "maxNo",
      type: "input",
      message: chalk.greenBright("Enter the Ending of Range ")
    },
    {
      name: "guessNo",
      type: "input",
      message: chalk.greenBright("Enter the Number to Guess ")
    }
  ]);
  let { minNo, maxNo, guessNo } = numberGame;
  let randomNo = Math.floor(Math.random() * (maxNo - minNo + 1) + minNo);
  if (guessNo === randomNo) {
    console.log(chalk.redBright("Congratulations! You guessed it right!"));
  } else if (guessNo > maxNo) {
    console.log(chalk.cyan("You entered a number above the range"));
    console.log(`Your Guess is ${guessNo} but Random Number is ${randomNo}`);
  } else if (guessNo < minNo) {
    console.log("You entered a number below the range");
    console.log(`Your Guess is ${guessNo} but Random Number is ${randomNo}`);
  } else {
    console.log(" Wrong Guess! Try again");
    console.log(`Your Guess is ${guessNo} but Random Number is ${randomNo}`);
  }
  let existOp = await inquirer.prompt([
    {
      name: "conformation",
      type: "confirm",
      message: "Do you want to Continue ",
      default: false
    }
  ]);
  conformation = existOp.conformation;
} while (conformation);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiaW5kZXgudHMiXSwKICAic291cmNlUm9vdCI6ICJFOlxcQ2VydGlmaWVkIEdlbmVyYXRpdmUgQWlcXFByb2plY3RzXFxRdWF0YXIgMSBwcm9qZWN0cydcXE51bWJlciBHdWVzcyIsCiAgInNvdXJjZXNDb250ZW50IjogWyIjISAvdXNyL2Jpbi9lbnYgbm9kZVxyXG5pbXBvcnQgaW5xdWlyZXIgZnJvbSBcImlucXVpcmVyXCI7XHJcbmltcG9ydCB7IGV4aXQgfSBmcm9tIFwicHJvY2Vzc1wiO1xyXG5pbXBvcnQgY2hhbGsgZnJvbSBcImNoYWxrXCI7XHJcbmxldCBjb25mb3JtYXRpb24gPSB0cnVlO1xyXG5kbyB7XHJcblxyXG4gICBsZXQgbnVtYmVyR2FtZSA9IGF3YWl0IGlucXVpcmVyLnByb21wdChbXHJcbiAgICAgIHtcclxuICAgICAgICAgbmFtZTogXCJtaW5Ob1wiLFxyXG4gICAgICAgICB0eXBlOiBcImlucHV0XCIsXHJcbiAgICAgICAgIG1lc3NhZ2U6IGNoYWxrLmdyZWVuQnJpZ2h0KFwiRW50ZXIgdGhlIFN0YXJ0aW5nIG9mIFJhbmdlIFwiKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAge1xyXG4gICAgICAgICBuYW1lOiBcIm1heE5vXCIsXHJcbiAgICAgICAgIHR5cGU6IFwiaW5wdXRcIixcclxuICAgICAgICAgbWVzc2FnZTogIGNoYWxrLmdyZWVuQnJpZ2h0KFwiRW50ZXIgdGhlIEVuZGluZyBvZiBSYW5nZSBcIilcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHtcclxuICAgICAgICAgbmFtZTogXCJndWVzc05vXCIsXHJcbiAgICAgICAgIHR5cGU6IFwiaW5wdXRcIixcclxuICAgICAgICAgbWVzc2FnZTogIGNoYWxrLmdyZWVuQnJpZ2h0KFwiRW50ZXIgdGhlIE51bWJlciB0byBHdWVzcyBcIilcclxuICAgICAgfVxyXG5cclxuICAgXSk7XHJcblxyXG4gICBsZXQgeyBtaW5ObywgbWF4Tm8sIGd1ZXNzTm8gfSA9IG51bWJlckdhbWU7XHJcblxyXG5cclxuICAgbGV0IHJhbmRvbU5vID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heE5vIC0gbWluTm8gKyAxKSArIG1pbk5vKVxyXG4gICBpZiAoZ3Vlc3NObyA9PT0gcmFuZG9tTm8pIHtcclxuICAgICAgY29uc29sZS5sb2coY2hhbGsucmVkQnJpZ2h0KFwiQ29uZ3JhdHVsYXRpb25zISBZb3UgZ3Vlc3NlZCBpdCByaWdodCFcIikpO1xyXG4gICAgICBcclxuICAgfSBlbHNlIGlmIChndWVzc05vID4gbWF4Tm8pIHtcclxuICAgICAgY29uc29sZS5sb2coY2hhbGsuY3lhbihcIllvdSBlbnRlcmVkIGEgbnVtYmVyIGFib3ZlIHRoZSByYW5nZVwiKSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBZb3VyIEd1ZXNzIGlzICR7Z3Vlc3NOb30gYnV0IFJhbmRvbSBOdW1iZXIgaXMgJHtyYW5kb21Ob31gKTtcclxuICAgICAgXHJcbiAgIH0gZWxzZSBpZiAoZ3Vlc3NObyA8IG1pbk5vKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiWW91IGVudGVyZWQgYSBudW1iZXIgYmVsb3cgdGhlIHJhbmdlXCIpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgWW91ciBHdWVzcyBpcyAke2d1ZXNzTm99IGJ1dCBSYW5kb20gTnVtYmVyIGlzICR7cmFuZG9tTm99YClcclxuICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coXCIgV3JvbmcgR3Vlc3MhIFRyeSBhZ2FpblwiKTtcclxuICAgICAgY29uc29sZS5sb2coYFlvdXIgR3Vlc3MgaXMgJHtndWVzc05vfSBidXQgUmFuZG9tIE51bWJlciBpcyAke3JhbmRvbU5vfWApXHJcbiAgIH1cclxuXHJcbiAgIGxldCBleGlzdE9wID0gYXdhaXQgaW5xdWlyZXIucHJvbXB0KFtcclxuICAgICAge1xyXG4gICAgICAgICBuYW1lOiBcImNvbmZvcm1hdGlvblwiLFxyXG4gICAgICAgICB0eXBlOiBcImNvbmZpcm1cIixcclxuICAgICAgICAgbWVzc2FnZTogXCJEbyB5b3Ugd2FudCB0byBDb250aW51ZSBcIixcclxuICAgICAgICAgZGVmYXVsdDogZmFsc2VcclxuXHJcbiAgICAgIH1cclxuICAgXSk7XHJcblxyXG4gICBjb25mb3JtYXRpb24gPSBleGlzdE9wLmNvbmZvcm1hdGlvbjtcclxufSB3aGlsZSAoY29uZm9ybWF0aW9uKTtcclxuXHJcblxyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7QUFDQSxPQUFPLGNBQWM7QUFFckIsT0FBTyxXQUFXO0FBQ2xCLElBQUksZUFBZTtBQUNuQixHQUFHO0FBRUEsTUFBSSxhQUFhLE1BQU0sU0FBUyxPQUFPO0FBQUEsSUFDcEM7QUFBQSxNQUNHLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLFNBQVMsTUFBTSxZQUFZLDhCQUE4QjtBQUFBLElBQzVEO0FBQUEsSUFFQTtBQUFBLE1BQ0csTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLE1BQ04sU0FBVSxNQUFNLFlBQVksNEJBQTRCO0FBQUEsSUFDM0Q7QUFBQSxJQUVBO0FBQUEsTUFDRyxNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixTQUFVLE1BQU0sWUFBWSw0QkFBNEI7QUFBQSxJQUMzRDtBQUFBLEVBRUgsQ0FBQztBQUVELE1BQUksRUFBRSxPQUFPLE9BQU8sUUFBUSxJQUFJO0FBR2hDLE1BQUksV0FBVyxLQUFLLE1BQU0sS0FBSyxPQUFPLEtBQUssUUFBUSxRQUFRLEtBQUssS0FBSztBQUNyRSxNQUFJLFlBQVksVUFBVTtBQUN2QixZQUFRLElBQUksTUFBTSxVQUFVLHdDQUF3QyxDQUFDO0FBQUEsRUFFeEUsV0FBVyxVQUFVLE9BQU87QUFDekIsWUFBUSxJQUFJLE1BQU0sS0FBSyxzQ0FBc0MsQ0FBQztBQUM5RCxZQUFRLElBQUksaUJBQWlCLGdDQUFnQyxVQUFVO0FBQUEsRUFFMUUsV0FBVyxVQUFVLE9BQU87QUFDekIsWUFBUSxJQUFJLHNDQUFzQztBQUNsRCxZQUFRLElBQUksaUJBQWlCLGdDQUFnQyxVQUFVO0FBQUEsRUFDMUUsT0FBTztBQUNKLFlBQVEsSUFBSSx5QkFBeUI7QUFDckMsWUFBUSxJQUFJLGlCQUFpQixnQ0FBZ0MsVUFBVTtBQUFBLEVBQzFFO0FBRUEsTUFBSSxVQUFVLE1BQU0sU0FBUyxPQUFPO0FBQUEsSUFDakM7QUFBQSxNQUNHLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLFNBQVM7QUFBQSxNQUNULFNBQVM7QUFBQSxJQUVaO0FBQUEsRUFDSCxDQUFDO0FBRUQsaUJBQWUsUUFBUTtBQUMxQixTQUFTOyIsCiAgIm5hbWVzIjogW10KfQo=

	